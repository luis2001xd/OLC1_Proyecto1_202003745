// ------------  Paquete e importaciones ------------
package Analizadores;

import java_cup.runtime.*;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.left + " - Columna: " + s.right + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.left + " - Columna: " + s.right + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}



//------> Declaración de terminales
terminal String MAIN, LLAVE_ABERTURA, VOID, PRINT, PARENTESIS_ABERTURA, PARENTESIS_CIERRE,
LLAVE_CIERRE, MAYOR_IGUAL, MENOR_IGUAL, DOBLE_IGUAL, DISTINTO, INT, DOUBLE, CHAR, BOOLEAN,
STRING, IF, IGUAL, ENTERO, PTOCOMA, VARIABLE, DECIMAL, SUMA, MENOS, MULT, DIVISION,UMENOS,
T_F, CADENA, CONCAT, AND, OR, NOT, MAYOR_QUE, MENOR_QUE, ELSEIF, ELSE, DOSPTOS, SWITCH,
DEFAULT, CASE, BREAK, FOR, INCREMENTO, WHILE, DO, DEFINIR_GLOBALES, DOLAR, NEWVALOR, COMA;
//------> Declaración de no terminales


// no terminales principales
non terminal inicio;
non terminal main;
non terminal instrucciones;
non terminal lista_instrucciones;


// no terminales para declaraciones de variables
non terminal declaracion_variables;
non terminal declaracion;
non terminal declaracion_bool;
non terminal declaracion_string;
non terminal declaracion_int;
non terminal declaracion_double;
non terminal declaracion_char;

// no terminales para sentencias de control y de repeticion
non terminal estructura_if;
non terminal estructura_for;


//no terminales para asignaciones
non terminal expresiones;
non terminal expresion_aritmetica;
non terminal expresiones_numericas;
non terminal llamada_funcion;
non terminal variable;
non terminal expresion;
// otros
non terminal imprimir;

nonterminal tipodato;
non terminal estructura_elseif;
non terminal lista_elseif;
non terminal estructura_else;
non terminal estructura_switch;
non terminal declaracion_sin_asignar;
non terminal lista_case;
non terminal estructura_case;
non terminal case_end;
non terminal expresion_for;
non terminal estructura_while;
non terminal estructura_dowhile;
non terminal definir_globales;
non terminal instrucciones_globales;
non terminal tipo_globales;
non terminal definiciones_globales;
non terminal definicion_double;

// Precedencias de operadores aritméticos
precedence left OR;
precedence left AND;
precedence right NOT;
precedence left DOBLE_IGUAL, DISTINTO, MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL;
precedence left SUMA,MENOS;
precedence left MULT,DIVISION;
precedence right UMENOS;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------




/* Definición de producción */
inicio ::= main;

main ::= VOID MAIN PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE{::};

lista_instrucciones ::= lista_instrucciones instrucciones {::}
                     | instrucciones {::}
                     | error  PTOCOMA
                     ;


instrucciones ::= declaracion
                  |imprimir
                  |estructura_if
                  |estructura_switch
                  |declaracion_sin_asignar
                  |estructura_for
                  |estructura_while
                  |estructura_dowhile
                  |definir_globales
                 ;

declaracion ::= tipodato VARIABLE IGUAL expresiones PTOCOMA{:System.out.println("Se delcaro todo bien");:}| tipodato VARIABLE PTOCOMA{:System.out.println("Calma, todo sigue bien");:};

imprimir ::= PRINT PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE PTOCOMA{:System.out.println("Se imprimio algo");:};

declaracion_sin_asignar ::= VARIABLE IGUAL expresiones PTOCOMA;



// Estructuras de if
estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA
                lista_instrucciones LLAVE_CIERRE lista_elseif estructura_else{:System.out.println("JUsto aqui");:}|
                IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA
                lista_instrucciones LLAVE_CIERRE estructura_else |
                IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA
                lista_instrucciones LLAVE_CIERRE lista_elseif|
                IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA
                lista_instrucciones LLAVE_CIERRE
                ;
                //IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA
                //lista_instrucciones LLAVE_CIERRE estructuras;

                //{:System.out.println("Termino la instruccion del if");:} ;





lista_elseif ::= lista_elseif estructura_elseif |
estructura_elseif;

estructura_elseif ::= ELSEIF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA
lista_instrucciones LLAVE_CIERRE;

estructura_else ::= ELSE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE;



//Estructuras de switch

estructura_switch ::= SWITCH PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_case DEFAULT DOSPTOS lista_instrucciones case_end LLAVE_CIERRE;

lista_case ::= lista_case estructura_case | estructura_case;

estructura_case ::= CASE expresiones DOSPTOS lista_instrucciones case_end;

case_end ::= BREAK PTOCOMA | /* vacío */;


//Estructura del for

estructura_for ::= FOR  PARENTESIS_ABERTURA declaracion expresiones PTOCOMA VARIABLE INCREMENTO PARENTESIS_CIERRE
LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE;


// estructura para el while

estructura_while ::= WHILE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE;



// estructura del do-while

estructura_dowhile ::= DO LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE WHILE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE PTOCOMA;



// estructuras para las expresiones
expresiones  ::=
  MENOS expresiones:a                      {::}%prec UMENOS
 |expresiones:a SUMA        expresiones:b     {::}
 |expresiones:a MENOS     expresiones:b     {::}
 |expresiones:a MULT        expresiones:b     {::}
 |expresiones:a DIVISION   expresiones:b     {::}
 |ENTERO:a                               {::}
 |DECIMAL: a
 |CADENA
 |VARIABLE
 |T_F
 |llamada_funcion
 |expresiones OR expresiones
 |expresiones AND expresiones
 |NOT expresiones{::}
 |expresiones DOBLE_IGUAL expresiones
 |expresiones DISTINTO expresiones
 |expresiones MENOR_QUE expresiones
 |expresiones MAYOR_QUE expresiones
 |expresiones MAYOR_IGUAL expresiones
 |expresiones MENOR_IGUAL expresiones
 ;

tipodato ::= INT | STRING | DOUBLE | CHAR | BOOLEAN;

llamada_funcion ::= VARIABLE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE;


// Definir globales

definir_globales ::= VOID DEFINIR_GLOBALES PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA instrucciones_globales LLAVE_CIERRE;

instrucciones_globales ::= instrucciones_globales definiciones_globales | definiciones_globales;

definiciones_globales ::= tipo_globales ;

tipo_globales ::= definicion_double | STRING VARIABLE IGUAL CADENA PTOCOMA;

definicion_double ::= DOUBLE VARIABLE IGUAL DOLAR LLAVE_ABERTURA NEWVALOR COMA
CADENA COMA CADENA LLAVE_CIERRE PTOCOMA{:System.out.println("Definio otro tipo de hlobal");:} | DOUBLE VARIABLE IGUAL DECIMAL PTOCOMA;


