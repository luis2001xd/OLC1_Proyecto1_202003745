
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Statpy;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\005\004\000\002\005\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\007\007\000\002\007\005" +
    "\000\002\016\007\000\002\024\006\000\002\010\013\000" +
    "\002\010\012\000\002\010\012\000\002\010\011\000\002" +
    "\021\004\000\002\021\003\000\002\020\011\000\002\022" +
    "\006\000\002\023\015\000\002\025\004\000\002\025\003" +
    "\000\002\026\007\000\002\027\004\000\002\027\002\000" +
    "\002\011\023\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\057\003\000\002\031\011\000\002\032\013" +
    "\000\002\012\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\013\006\000\002\013" +
    "\005\000\002\033\011\000\002\034\004\000\002\034\003" +
    "\000\002\036\003\000\002\035\007\000\002\035\007\000" +
    "\002\040\011\000\002\041\004\000\002\041\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\045\007\000\002\043\007" +
    "\000\002\044\007\000\002\051\012\000\002\047\012\000" +
    "\002\046\005\000\002\046\003\000\002\053\011\000\002" +
    "\054\004\000\002\054\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\050\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\006\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\010\011\001\002\000" +
    "\004\011\012\001\002\000\004\005\013\001\002\000\036" +
    "\003\037\006\044\007\036\017\017\020\047\021\020\022" +
    "\032\023\034\024\026\030\025\052\024\056\043\060\021" +
    "\061\031\001\002\000\004\030\u0105\001\002\000\046\003" +
    "\ufffd\006\ufffd\007\ufffd\012\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\030\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\060\ufffd\061\ufffd\001\002\000\046" +
    "\003\ufff3\006\ufff3\007\ufff3\012\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\030\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\060\ufff3\061\ufff3\001\002\000" +
    "\004\030\uffb7\001\002\000\004\030\uffb4\001\002\000\004" +
    "\010\377\001\002\000\046\003\ufffb\006\ufffb\007\ufffb\012" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\030\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\060" +
    "\ufffb\061\ufffb\001\002\000\046\003\ufff9\006\ufff9\007\ufff9" +
    "\012\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\030\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\060\ufff9\061\ufff9\001\002\000\004\010\354\001\002\000" +
    "\004\025\351\001\002\000\004\010\323\001\002\000\046" +
    "\003\ufff2\006\ufff2\007\ufff2\012\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\030\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\060\ufff2\061\ufff2\001\002\000" +
    "\046\003\ufffa\006\ufffa\007\ufffa\012\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\030\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa\061\ufffa\001\002" +
    "\000\004\005\313\001\002\000\004\030\uffb3\001\002\000" +
    "\046\003\ufffc\006\ufffc\007\ufffc\012\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\030\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc\061\ufffc\001\002" +
    "\000\004\030\uffb6\001\002\000\040\003\037\006\044\007" +
    "\036\012\312\017\017\020\047\021\020\022\032\023\034" +
    "\024\026\030\025\052\024\056\043\060\021\061\031\001" +
    "\002\000\004\010\306\001\002\000\004\027\305\001\002" +
    "\000\046\003\ufff6\006\ufff6\007\ufff6\012\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\030\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6\001" +
    "\002\000\046\003\ufff8\006\ufff8\007\ufff8\012\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\030\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\060\ufff8\061\ufff8" +
    "\001\002\000\046\003\ufff4\006\ufff4\007\ufff4\012\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\030\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\061" +
    "\ufff4\001\002\000\004\010\177\001\002\000\010\062\051" +
    "\066\052\075\050\001\002\000\046\003\ufff5\006\ufff5\007" +
    "\ufff5\012\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\030\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\060\ufff5\061\ufff5\001\002\000\046\003\ufff7\006\ufff7" +
    "\007\ufff7\012\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\030\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\060\ufff7\061\ufff7\001\002\000\004\030\uffb5\001" +
    "\002\000\004\010\164\001\002\000\004\010\142\001\002" +
    "\000\004\010\053\001\002\000\004\011\054\001\002\000" +
    "\004\005\055\001\002\000\006\020\064\023\062\001\002" +
    "\000\010\012\uffa4\020\uffa4\023\uffa4\001\002\000\010\012" +
    "\uffa7\020\uffa7\023\uffa7\001\002\000\010\012\141\020\064" +
    "\023\062\001\002\000\010\012\uffa3\020\uffa3\023\uffa3\001" +
    "\002\000\012\067\120\070\115\073\117\074\116\001\002" +
    "\000\010\012\uffa5\020\uffa5\023\uffa5\001\002\000\004\067" +
    "\067\001\002\000\010\012\uffa6\020\uffa6\023\uffa6\001\002" +
    "\000\010\012\uffa8\020\uffa8\023\uffa8\001\002\000\004\072" +
    "\070\001\002\000\004\025\071\001\002\000\004\005\072" +
    "\001\002\000\012\030\100\031\077\040\101\063\073\001" +
    "\002\000\004\005\106\001\002\000\010\012\uff92\027\uff92" +
    "\065\uff92\001\002\000\006\012\uff9c\065\104\001\002\000" +
    "\004\012\102\001\002\000\010\012\uff95\027\uff95\065\uff95" +
    "\001\002\000\010\012\uff93\027\uff93\065\uff93\001\002\000" +
    "\010\012\uff94\027\uff94\065\uff94\001\002\000\004\027\103" +
    "\001\002\000\010\012\uff9e\020\uff9e\023\uff9e\001\002\000" +
    "\012\030\100\031\077\040\101\063\073\001\002\000\004" +
    "\012\uff9d\001\002\000\004\064\107\001\002\000\004\065" +
    "\110\001\002\000\004\040\111\001\002\000\004\065\112" +
    "\001\002\000\004\040\113\001\002\000\004\012\114\001" +
    "\002\000\010\012\uff91\027\uff91\065\uff91\001\002\000\004" +
    "\025\135\001\002\000\004\025\132\001\002\000\004\025" +
    "\127\001\002\000\004\071\121\001\002\000\004\025\122" +
    "\001\002\000\004\005\123\001\002\000\012\030\100\031" +
    "\077\040\101\063\073\001\002\000\004\012\125\001\002" +
    "\000\004\027\126\001\002\000\010\012\uff9f\020\uff9f\023" +
    "\uff9f\001\002\000\012\030\100\031\077\040\101\063\073" +
    "\001\002\000\004\027\131\001\002\000\010\012\uffa1\020" +
    "\uffa1\023\uffa1\001\002\000\012\030\100\031\077\040\101" +
    "\063\073\001\002\000\004\027\134\001\002\000\010\012" +
    "\uffa0\020\uffa0\023\uffa0\001\002\000\012\030\100\031\077" +
    "\040\101\063\073\001\002\000\004\027\137\001\002\000" +
    "\010\012\uffa2\020\uffa2\023\uffa2\001\002\000\010\012\uffa9" +
    "\020\uffa9\023\uffa9\001\002\000\046\003\uffaa\006\uffaa\007" +
    "\uffaa\012\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\030\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\060\uffaa\061\uffaa\001\002\000\004\011\143\001\002" +
    "\000\004\005\144\001\002\000\006\020\146\023\145\001" +
    "\002\000\004\030\160\001\002\000\004\030\154\001\002" +
    "\000\010\012\uffae\020\uffae\023\uffae\001\002\000\010\012" +
    "\uffad\020\uffad\023\uffad\001\002\000\010\012\153\020\146" +
    "\023\145\001\002\000\010\012\uffaf\020\uffaf\023\uffaf\001" +
    "\002\000\046\003\uffb0\006\uffb0\007\uffb0\012\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\030\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0" +
    "\001\002\000\004\025\155\001\002\000\012\030\100\031" +
    "\077\040\101\063\073\001\002\000\004\027\157\001\002" +
    "\000\010\012\uffac\020\uffac\023\uffac\001\002\000\004\025" +
    "\161\001\002\000\012\030\100\031\077\040\101\063\073" +
    "\001\002\000\004\027\163\001\002\000\010\012\uffab\020" +
    "\uffab\023\uffab\001\002\000\004\011\165\001\002\000\004" +
    "\005\166\001\002\000\006\020\064\023\167\001\002\000" +
    "\006\067\120\070\115\001\002\000\010\012\uff98\020\uff98" +
    "\023\uff98\001\002\000\010\012\uff97\020\uff97\023\uff97\001" +
    "\002\000\010\012\uff99\020\uff99\023\uff99\001\002\000\010" +
    "\012\176\020\064\023\167\001\002\000\010\012\uff96\020" +
    "\uff96\023\uff96\001\002\000\010\012\uff9a\020\uff9a\023\uff9a" +
    "\001\002\000\046\003\uff9b\006\uff9b\007\uff9b\012\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\030\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b\061" +
    "\uff9b\001\002\000\014\017\017\020\047\021\020\022\032" +
    "\023\034\001\002\000\004\030\201\001\002\000\004\025" +
    "\202\001\002\000\040\013\211\014\223\015\216\016\220" +
    "\026\212\030\213\031\205\033\207\037\206\040\203\042" +
    "\204\043\222\044\221\045\210\046\214\001\002\000\040" +
    "\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\027\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\042\uffcd\043\uffcd\045\uffcd" +
    "\046\uffcd\051\uffcd\001\002\000\040\011\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\027\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\051\uffc3\001" +
    "\002\000\040\011\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\027\uffce\032\uffce\033\uffce\034\uffce\035\uffce\042\uffce\043" +
    "\uffce\045\uffce\046\uffce\051\uffce\001\002\000\040\011\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\027\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb" +
    "\051\uffcb\001\002\000\040\013\211\014\223\015\216\016" +
    "\220\026\212\030\213\031\205\033\207\037\206\040\203" +
    "\042\204\043\222\044\221\045\210\046\214\001\002\000" +
    "\040\011\uffca\013\uffca\014\uffca\015\uffca\016\uffca\027\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\042\uffca\043\uffca\045" +
    "\uffca\046\uffca\051\uffca\001\002\000\040\011\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\027\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\051\uffc7" +
    "\001\002\000\040\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\027\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\042\uffcf" +
    "\043\uffcf\045\uffcf\046\uffcf\051\uffcf\001\002\000\042\010" +
    "\300\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\027\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\042\uffcc\043\uffcc\045" +
    "\uffcc\046\uffcc\051\uffcc\001\002\000\040\011\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\027\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\051\uffc9" +
    "\001\002\000\040\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\042\uffc1" +
    "\043\uffc1\045\uffc1\046\uffc1\051\uffc1\001\002\000\040\011" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\027\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\042\uffc6\043\uffc6\045\uffc6\046" +
    "\uffc6\051\uffc6\001\002\000\034\013\231\014\240\015\235" +
    "\016\236\027\255\032\230\033\226\034\232\035\234\042" +
    "\225\043\237\045\227\046\233\001\002\000\040\011\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\027\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5" +
    "\051\uffc5\001\002\000\054\011\uffc2\013\211\014\223\015" +
    "\216\016\220\026\212\027\uffc2\030\213\031\205\032\uffc2" +
    "\033\207\034\uffc2\035\uffc2\037\206\040\203\042\uffc2\043" +
    "\uffc2\044\221\045\210\046\214\051\uffc2\001\002\000\040" +
    "\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\027\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\042\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\051\uffc4\001\002\000\040\011\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\027\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8\051\uffc8\001" +
    "\002\000\040\011\uffbe\013\231\014\240\015\235\016\236" +
    "\027\uffbe\032\230\033\226\034\232\035\234\042\uffbe\043" +
    "\uffbe\045\227\046\233\051\uffbe\001\002\000\040\013\211" +
    "\014\223\015\216\016\220\026\212\030\213\031\205\033" +
    "\207\037\206\040\203\042\204\043\222\044\221\045\210" +
    "\046\214\001\002\000\040\013\211\014\223\015\216\016" +
    "\220\026\212\030\213\031\205\033\207\037\206\040\203" +
    "\042\204\043\222\044\221\045\210\046\214\001\002\000" +
    "\040\013\211\014\223\015\216\016\220\026\212\030\213" +
    "\031\205\033\207\037\206\040\203\042\204\043\222\044" +
    "\221\045\210\046\214\001\002\000\040\013\211\014\223" +
    "\015\216\016\220\026\212\030\213\031\205\033\207\037" +
    "\206\040\203\042\204\043\222\044\221\045\210\046\214" +
    "\001\002\000\040\013\211\014\223\015\216\016\220\026" +
    "\212\030\213\031\205\033\207\037\206\040\203\042\204" +
    "\043\222\044\221\045\210\046\214\001\002\000\040\013" +
    "\211\014\223\015\216\016\220\026\212\030\213\031\205" +
    "\033\207\037\206\040\203\042\204\043\222\044\221\045" +
    "\210\046\214\001\002\000\040\013\211\014\223\015\216" +
    "\016\220\026\212\030\213\031\205\033\207\037\206\040" +
    "\203\042\204\043\222\044\221\045\210\046\214\001\002" +
    "\000\040\013\211\014\223\015\216\016\220\026\212\030" +
    "\213\031\205\033\207\037\206\040\203\042\204\043\222" +
    "\044\221\045\210\046\214\001\002\000\040\013\211\014" +
    "\223\015\216\016\220\026\212\030\213\031\205\033\207" +
    "\037\206\040\203\042\204\043\222\044\221\045\210\046" +
    "\214\001\002\000\040\013\211\014\223\015\216\016\220" +
    "\026\212\030\213\031\205\033\207\037\206\040\203\042" +
    "\204\043\222\044\221\045\210\046\214\001\002\000\040" +
    "\013\211\014\223\015\216\016\220\026\212\030\213\031" +
    "\205\033\207\037\206\040\203\042\204\043\222\044\221" +
    "\045\210\046\214\001\002\000\040\013\211\014\223\015" +
    "\216\016\220\026\212\030\213\031\205\033\207\037\206" +
    "\040\203\042\204\043\222\044\221\045\210\046\214\001" +
    "\002\000\040\011\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\027\uffb8\032\230\033\226\034\232\035\234\042\uffb8\043" +
    "\uffb8\045\uffb8\046\uffb8\051\uffb8\001\002\000\040\011\uffc0" +
    "\013\231\014\240\015\235\016\236\027\uffc0\032\230\033" +
    "\226\034\232\035\234\042\225\043\uffc0\045\227\046\233" +
    "\051\uffc0\001\002\000\040\011\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\027\uffbc\032\230\033\226\034\232\035\234" +
    "\042\uffbc\043\uffbc\045\uffbc\046\uffbc\051\uffbc\001\002\000" +
    "\040\011\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\027\uffbd" +
    "\032\230\033\226\034\232\035\234\042\uffbd\043\uffbd\045" +
    "\uffbd\046\uffbd\051\uffbd\001\002\000\040\011\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\027\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\042\uffd0\043\uffd0\045\uffd0\046\uffd0\051\uffd0" +
    "\001\002\000\040\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\027\uffbb\032\230\033\226\034\232\035\234\042\uffbb" +
    "\043\uffbb\045\uffbb\046\uffbb\051\uffbb\001\002\000\040\011" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\027\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\042\uffd1\043\uffd1\045\uffd1\046" +
    "\uffd1\051\uffd1\001\002\000\040\011\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\027\uffb9\032\230\033\226\034\232\035" +
    "\234\042\uffb9\043\uffb9\045\uffb9\046\uffb9\051\uffb9\001\002" +
    "\000\040\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\027" +
    "\uffd3\032\uffd3\033\uffd3\034\232\035\234\042\uffd3\043\uffd3" +
    "\045\uffd3\046\uffd3\051\uffd3\001\002\000\040\011\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\027\uffba\032\230\033\226" +
    "\034\232\035\234\042\uffba\043\uffba\045\uffba\046\uffba\051" +
    "\uffba\001\002\000\040\011\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\027\uffd2\032\uffd2\033\uffd2\034\232\035\234\042" +
    "\uffd2\043\uffd2\045\uffd2\046\uffd2\051\uffd2\001\002\000\040" +
    "\011\uffbf\013\231\014\240\015\235\016\236\027\uffbf\032" +
    "\230\033\226\034\232\035\234\042\uffbf\043\uffbf\045\227" +
    "\046\233\051\uffbf\001\002\000\004\030\256\001\002\000" +
    "\016\013\265\014\264\015\262\025\263\045\257\046\260" +
    "\001\002\000\040\013\uffdc\014\uffdc\015\uffdc\016\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\033\uffdc\037\uffdc\040\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\001\002\000\040\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\026\uffda\030\uffda\031\uffda" +
    "\033\uffda\037\uffda\040\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\001\002\000\040\013\211\014\223\015\216" +
    "\016\220\026\212\030\213\031\205\033\207\037\206\040" +
    "\203\042\204\043\222\044\221\045\210\046\214\001\002" +
    "\000\040\013\uffd8\014\uffd8\015\uffd8\016\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\033\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\001\002\000\040\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\026\uffd9\030\uffd9\031\uffd9\033\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\001\002\000\040\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\026\uffdb\030\uffdb\031\uffdb\033\uffdb\037\uffdb\040\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\040" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\026\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\001\002\000\034\013\231\014\240\015" +
    "\235\016\236\027\uffd7\032\230\033\226\034\232\035\234" +
    "\042\225\043\237\045\227\046\233\001\002\000\004\027" +
    "\270\001\002\000\004\030\271\001\002\000\004\057\272" +
    "\001\002\000\004\011\273\001\002\000\004\005\274\001" +
    "\002\000\036\003\037\006\044\007\036\017\017\020\047" +
    "\021\020\022\032\023\034\024\026\030\025\052\024\056" +
    "\043\060\021\061\031\001\002\000\040\003\037\006\044" +
    "\007\036\012\276\017\017\020\047\021\020\022\032\023" +
    "\034\024\026\030\025\052\024\056\043\060\021\061\031" +
    "\001\002\000\046\003\uffde\006\uffde\007\uffde\012\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\030\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\060\uffde\061" +
    "\uffde\001\002\000\046\003\ufffe\006\ufffe\007\ufffe\012\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\030" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe" +
    "\061\ufffe\001\002\000\042\011\302\013\211\014\223\015" +
    "\216\016\220\026\212\030\213\031\205\033\207\037\206" +
    "\040\203\042\204\043\222\044\221\045\210\046\214\001" +
    "\002\000\034\011\303\013\231\014\240\015\235\016\236" +
    "\032\230\033\226\034\232\035\234\042\225\043\237\045" +
    "\227\046\233\001\002\000\040\011\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\027\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1\051\uffb1\001\002" +
    "\000\040\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\027" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\042\uffb2\043\uffb2" +
    "\045\uffb2\046\uffb2\051\uffb2\001\002\000\040\011\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\027\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\051" +
    "\uffd4\001\002\000\046\003\ufff1\006\ufff1\007\ufff1\012\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\030" +
    "\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\060\ufff1" +
    "\061\ufff1\001\002\000\040\013\211\014\223\015\216\016" +
    "\220\026\212\030\213\031\205\033\207\037\206\040\203" +
    "\042\204\043\222\044\221\045\210\046\214\001\002\000" +
    "\034\011\310\013\231\014\240\015\235\016\236\032\230" +
    "\033\226\034\232\035\234\042\225\043\237\045\227\046" +
    "\233\001\002\000\004\027\311\001\002\000\046\003\uffee" +
    "\006\uffee\007\uffee\012\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\030\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\056\uffee\060\uffee\061\uffee\001\002\000\004\002" +
    "\uffff\001\002\000\036\003\037\006\044\007\036\017\017" +
    "\020\047\021\020\022\032\023\034\024\026\030\025\052" +
    "\024\056\043\060\021\061\031\001\002\000\040\003\037" +
    "\006\044\007\036\012\315\017\017\020\047\021\020\022" +
    "\032\023\034\024\026\030\025\052\024\056\043\060\021" +
    "\061\031\001\002\000\004\060\316\001\002\000\004\010" +
    "\317\001\002\000\040\013\211\014\223\015\216\016\220" +
    "\026\212\030\213\031\205\033\207\037\206\040\203\042" +
    "\204\043\222\044\221\045\210\046\214\001\002\000\034" +
    "\011\321\013\231\014\240\015\235\016\236\032\230\033" +
    "\226\034\232\035\234\042\225\043\237\045\227\046\233" +
    "\001\002\000\004\027\322\001\002\000\046\003\uffd5\006" +
    "\uffd5\007\uffd5\012\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\030\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\060\uffd5\061\uffd5\001\002\000\040\013\211" +
    "\014\223\015\216\016\220\026\212\030\213\031\205\033" +
    "\207\037\206\040\203\042\204\043\222\044\221\045\210" +
    "\046\214\001\002\000\034\011\325\013\231\014\240\015" +
    "\235\016\236\032\230\033\226\034\232\035\234\042\225" +
    "\043\237\045\227\046\233\001\002\000\004\005\326\001" +
    "\002\000\036\003\037\006\044\007\036\017\017\020\047" +
    "\021\020\022\032\023\034\024\026\030\025\052\024\056" +
    "\043\060\021\061\031\001\002\000\040\003\037\006\044" +
    "\007\036\012\330\017\017\020\047\021\020\022\032\023" +
    "\034\024\026\030\025\052\024\056\043\060\021\061\031" +
    "\001\002\000\052\003\uffe9\006\uffe9\007\uffe9\012\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\030\uffe9" +
    "\047\333\050\332\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\060\uffe9\061\uffe9\001\002\000\052\003\uffea\006\uffea" +
    "\007\uffea\012\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\030\uffea\047\333\050\332\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\060\uffea\061\uffea\001\002\000" +
    "\004\005\344\001\002\000\004\010\336\001\002\000\046" +
    "\003\uffeb\006\uffeb\007\uffeb\012\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\030\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb\001\002\000" +
    "\052\003\uffe7\006\uffe7\007\uffe7\012\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\030\uffe7\047\uffe7\050" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\060\uffe7" +
    "\061\uffe7\001\002\000\040\013\211\014\223\015\216\016" +
    "\220\026\212\030\213\031\205\033\207\037\206\040\203" +
    "\042\204\043\222\044\221\045\210\046\214\001\002\000" +
    "\034\011\340\013\231\014\240\015\235\016\236\032\230" +
    "\033\226\034\232\035\234\042\225\043\237\045\227\046" +
    "\233\001\002\000\004\005\341\001\002\000\036\003\037" +
    "\006\044\007\036\017\017\020\047\021\020\022\032\023" +
    "\034\024\026\030\025\052\024\056\043\060\021\061\031" +
    "\001\002\000\040\003\037\006\044\007\036\012\343\017" +
    "\017\020\047\021\020\022\032\023\034\024\026\030\025" +
    "\052\024\056\043\060\021\061\031\001\002\000\052\003" +
    "\uffe6\006\uffe6\007\uffe6\012\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\030\uffe6\047\uffe6\050\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6" +
    "\001\002\000\036\003\037\006\044\007\036\017\017\020" +
    "\047\021\020\022\032\023\034\024\026\030\025\052\024" +
    "\056\043\060\021\061\031\001\002\000\040\003\037\006" +
    "\044\007\036\012\346\017\017\020\047\021\020\022\032" +
    "\023\034\024\026\030\025\052\024\056\043\060\021\061" +
    "\031\001\002\000\046\003\uffe5\006\uffe5\007\uffe5\012\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\030" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5" +
    "\061\uffe5\001\002\000\046\003\uffec\006\uffec\007\uffec\012" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\030\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\060" +
    "\uffec\061\uffec\001\002\000\052\003\uffe8\006\uffe8\007\uffe8" +
    "\012\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\030\uffe8\047\uffe8\050\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\060\uffe8\061\uffe8\001\002\000\040\013" +
    "\211\014\223\015\216\016\220\026\212\030\213\031\205" +
    "\033\207\037\206\040\203\042\204\043\222\044\221\045" +
    "\210\046\214\001\002\000\034\013\231\014\240\015\235" +
    "\016\236\027\353\032\230\033\226\034\232\035\234\042" +
    "\225\043\237\045\227\046\233\001\002\000\046\003\uffed" +
    "\006\uffed\007\uffed\012\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\030\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\060\uffed\061\uffed\001\002\000\040\013" +
    "\211\014\223\015\216\016\220\026\212\030\213\031\205" +
    "\033\207\037\206\040\203\042\204\043\222\044\221\045" +
    "\210\046\214\001\002\000\034\011\356\013\231\014\240" +
    "\015\235\016\236\032\230\033\226\034\232\035\234\042" +
    "\225\043\237\045\227\046\233\001\002\000\004\005\357" +
    "\001\002\000\004\054\361\001\002\000\006\053\uffe2\054" +
    "\uffe2\001\002\000\040\013\211\014\223\015\216\016\220" +
    "\026\212\030\213\031\205\033\207\037\206\040\203\042" +
    "\204\043\222\044\221\045\210\046\214\001\002\000\006" +
    "\053\364\054\361\001\002\000\006\053\uffe3\054\uffe3\001" +
    "\002\000\004\051\365\001\002\000\036\003\037\006\044" +
    "\007\036\017\017\020\047\021\020\022\032\023\034\024" +
    "\026\030\025\052\024\056\043\060\021\061\031\001\002" +
    "\000\042\003\037\006\044\007\036\012\uffdf\017\017\020" +
    "\047\021\020\022\032\023\034\024\026\030\025\052\024" +
    "\055\367\056\043\060\021\061\031\001\002\000\004\027" +
    "\372\001\002\000\004\012\371\001\002\000\046\003\uffe4" +
    "\006\uffe4\007\uffe4\012\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\030\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\060\uffe4\061\uffe4\001\002\000\010\012" +
    "\uffe0\053\uffe0\054\uffe0\001\002\000\034\013\231\014\240" +
    "\015\235\016\236\032\230\033\226\034\232\035\234\042" +
    "\225\043\237\045\227\046\233\051\374\001\002\000\036" +
    "\003\037\006\044\007\036\017\017\020\047\021\020\022" +
    "\032\023\034\024\026\030\025\052\024\056\043\060\021" +
    "\061\031\001\002\000\044\003\037\006\044\007\036\017" +
    "\017\020\047\021\020\022\032\023\034\024\026\030\025" +
    "\052\024\053\uffdf\054\uffdf\055\367\056\043\060\021\061" +
    "\031\001\002\000\006\053\uffe1\054\uffe1\001\002\000\040" +
    "\013\211\014\223\015\216\016\220\026\212\030\213\031" +
    "\205\033\207\037\206\040\203\042\204\043\222\044\221" +
    "\045\210\046\214\001\002\000\034\011\u0101\013\231\014" +
    "\240\015\235\016\236\032\230\033\226\034\232\035\234" +
    "\042\225\043\237\045\227\046\233\001\002\000\004\005" +
    "\u0102\001\002\000\036\003\037\006\044\007\036\017\017" +
    "\020\047\021\020\022\032\023\034\024\026\030\025\052" +
    "\024\056\043\060\021\061\031\001\002\000\040\003\037" +
    "\006\044\007\036\012\u0104\017\017\020\047\021\020\022" +
    "\032\023\034\024\026\030\025\052\024\056\043\060\021" +
    "\061\031\001\002\000\046\003\uffd6\006\uffd6\007\uffd6\012" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\030\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060" +
    "\uffd6\061\uffd6\001\002\000\006\025\u0107\027\u0106\001\002" +
    "\000\046\003\uffef\006\uffef\007\uffef\012\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\030\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\060\uffef\061\uffef\001" +
    "\002\000\040\013\211\014\223\015\216\016\220\026\212" +
    "\030\213\031\205\033\207\037\206\040\203\042\204\043" +
    "\222\044\221\045\210\046\214\001\002\000\034\013\231" +
    "\014\240\015\235\016\236\027\u0109\032\230\033\226\034" +
    "\232\035\234\042\225\043\237\045\227\046\233\001\002" +
    "\000\046\003\ufff0\006\ufff0\007\ufff0\012\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\030\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\060\ufff0\061\ufff0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\014\005\034\007\032\010\027\011\045\016\021" +
    "\017\013\023\022\024\040\031\037\032\044\033\041\040" +
    "\015\053\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\276\007" +
    "\032\010\027\011\045\016\021\017\013\023\022\024\040" +
    "\031\037\032\044\033\041\040\015\053\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\041\057\042\065" +
    "\043\064\044\062\045\056\047\055\051\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\042\137\043\064" +
    "\044\062\045\056\047\055\051\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\075\050\073" +
    "\052\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\104\050\073\052\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\123\050\073\052\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\073\052\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\073\052\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\073\052\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\150\035\147\036\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\147\036\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\073\052\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\073\052\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\045\167" +
    "\047\173\051\170\054\172\055\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\045\167\047\173\051\170\055\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\216\013\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\303\013\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\223\013\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\253" +
    "\013\214\001\001\000\006\012\252\013\214\001\001\000" +
    "\006\012\251\013\214\001\001\000\006\012\250\013\214" +
    "\001\001\000\006\012\247\013\214\001\001\000\006\012" +
    "\246\013\214\001\001\000\006\012\245\013\214\001\001" +
    "\000\006\012\244\013\214\001\001\000\006\012\243\013" +
    "\214\001\001\000\006\012\242\013\214\001\001\000\006" +
    "\012\241\013\214\001\001\000\006\012\240\013\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\265\013\214\057\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\014\005\274\007\032\010\027\011\045\016" +
    "\021\017\013\023\022\024\040\031\037\032\044\033\041" +
    "\040\015\053\026\001\001\000\034\004\276\007\032\010" +
    "\027\011\045\016\021\017\013\023\022\024\040\031\037" +
    "\032\044\033\041\040\015\053\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\300\013\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\306\013\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\014\005\313\007\032" +
    "\010\027\011\045\016\021\017\013\023\022\024\040\031" +
    "\037\032\044\033\041\040\015\053\026\001\001\000\034" +
    "\004\276\007\032\010\027\011\045\016\021\017\013\023" +
    "\022\024\040\031\037\032\044\033\041\040\015\053\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\317\013\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\323\013\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\014\005\326" +
    "\007\032\010\027\011\045\016\021\017\013\023\022\024" +
    "\040\031\037\032\044\033\041\040\015\053\026\001\001" +
    "\000\034\004\276\007\032\010\027\011\045\016\021\017" +
    "\013\023\022\024\040\031\037\032\044\033\041\040\015" +
    "\053\026\001\001\000\010\020\334\021\330\022\333\001" +
    "\001\000\006\020\347\022\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\336\013\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\014\005\341\007\032\010\027\011" +
    "\045\016\021\017\013\023\022\024\040\031\037\032\044" +
    "\033\041\040\015\053\026\001\001\000\034\004\276\007" +
    "\032\010\027\011\045\016\021\017\013\023\022\024\040" +
    "\031\037\032\044\033\041\040\015\053\026\001\001\000" +
    "\002\001\001\000\036\004\014\005\344\007\032\010\027" +
    "\011\045\016\021\017\013\023\022\024\040\031\037\032" +
    "\044\033\041\040\015\053\026\001\001\000\034\004\276" +
    "\007\032\010\027\011\045\016\021\017\013\023\022\024" +
    "\040\031\037\032\044\033\041\040\015\053\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\351\013\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\354\013\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\361\026\357\001\001" +
    "\000\002\001\001\000\006\012\372\013\214\001\001\000" +
    "\004\026\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\014\005\365\007\032\010\027\011\045\016" +
    "\021\017\013\023\022\024\040\031\037\032\044\033\041" +
    "\040\015\053\026\001\001\000\036\004\276\007\032\010" +
    "\027\011\045\016\021\017\013\023\022\024\040\027\367" +
    "\031\037\032\044\033\041\040\015\053\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\014\005\374\007" +
    "\032\010\027\011\045\016\021\017\013\023\022\024\040" +
    "\031\037\032\044\033\041\040\015\053\026\001\001\000" +
    "\036\004\276\007\032\010\027\011\045\016\021\017\013" +
    "\023\022\024\040\027\375\031\037\032\044\033\041\040" +
    "\015\053\026\001\001\000\002\001\001\000\006\012\377" +
    "\013\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\014\005\u0102\007\032\010\027\011\045\016\021" +
    "\017\013\023\022\024\040\031\037\032\044\033\041\040" +
    "\015\053\026\001\001\000\034\004\276\007\032\010\027" +
    "\011\045\016\021\017\013\023\022\024\040\031\037\032" +
    "\044\033\041\040\015\053\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u0107\013" +
    "\214\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String do_while = "";
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.left + " - Columna: " + s.right + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.left + " - Columna: " + s.right + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= VOID MAIN PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		LinkedList<String> lista_1 = new LinkedList<>();

      lista_1.add("def"+" main "+"("+")"+":");
      Traduccion.Traductor.contador++;
      lista_1.addAll(Traduccion.Traductor.tabulaciones(lista));



      Traduccion.Traductor.contador--;

      lista_1.add ("if __name__ == \"__main__\":"+"\n"+"\t main()");

      Traduccion.Traductor.traduccion.addAll(lista_1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                            lista.addAll((LinkedList) val);
                            RESULT = (LinkedList) lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                     LinkedList<String> lista = new LinkedList<>();
                     lista.addAll((LinkedList) val);
                     RESULT = (LinkedList) lista;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= declaracion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= imprimir 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= estructura_if 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= estructura_switch 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= declaracion_sin_asignar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= estructura_for 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= estructura_while 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= estructura_dowhile 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= definir_globales 
            {
              Object RESULT =null;
		
                     LinkedList<String> lista = new LinkedList<>();

                         lista.add("");
                         RESULT = lista;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= definir_barras 
            {
              Object RESULT =null;
		
                       LinkedList<String> lista = new LinkedList<>();

                           lista.add("");
                           RESULT = lista;
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= definir_pie 
            {
              Object RESULT =null;
		
                    LinkedList<String> lista = new LinkedList<>();

                        lista.add("");
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones ::= error PTOCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  LinkedList<String> lista = new LinkedList<>();

                      lista.add("");
                      RESULT = lista;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= tipodato VARIABLE IGUAL expresiones PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    LinkedList<String> lista = new LinkedList<>();
    lista.add(a +" = "+ b);
    RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= tipodato VARIABLE PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    LinkedList<String> lista = new LinkedList<>();

    lista.add(a + "=" + "NONE");
    RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // imprimir ::= PRINT PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE PTOCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    LinkedList<String> lista = new LinkedList<>();
    String cadena = Traduccion.Traductor.cambiar(val.toString());
    lista.add("print("+cadena+")");
    RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_sin_asignar ::= VARIABLE IGUAL expresiones PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    LinkedList<String> lista = new LinkedList<>();

    lista.add(a + " = "+ exp);
    RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_sin_asignar",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE lista_elseif estructura_else 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inst_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inst_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst_2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int inst_3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inst_3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList inst_3 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                         LinkedList<String> lista = new LinkedList<>();

                         lista.add("if "+ exp + ":");
                         Traduccion.Traductor.contador++;
                         lista.addAll(Traduccion.Traductor.tabulaciones(inst));



                         Traduccion.Traductor.contador--;

                         lista.addAll(Traduccion.Traductor.tabulaciones(inst_2));
                         lista.addAll(Traduccion.Traductor.tabulaciones(inst_3));



                         RESULT = lista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE estructura_else 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int inst_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inst_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList inst_2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<String> lista = new LinkedList<>();

                         lista.add("if "+ exp + ":");
                         Traduccion.Traductor.contador++;
                         lista.addAll(Traduccion.Traductor.tabulaciones(inst));



                         Traduccion.Traductor.contador--;

                         lista.addAll(Traduccion.Traductor.tabulaciones(inst_2));




                         RESULT = lista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE lista_elseif 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int inst_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inst_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList inst_2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                         LinkedList<String> lista = new LinkedList<>();

                         lista.add("if "+ exp + ":");
                         Traduccion.Traductor.contador++;
                         lista.addAll(Traduccion.Traductor.tabulaciones(inst));



                         Traduccion.Traductor.contador--;

                         lista.addAll(Traduccion.Traductor.tabulaciones(inst_2));




                         RESULT = lista;
                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int inst_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inst_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst_1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("if "+ exp + ":");

                        Traduccion.Traductor.contador++;
                        lista.addAll(Traduccion.Traductor.tabulaciones(inst_1));
                        Traduccion.Traductor.contador--;


                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_elseif ::= lista_elseif estructura_elseif 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lista.addAll((LinkedList) val);
 RESULT = (LinkedList) lista;
  ;
                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_elseif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_elseif ::= estructura_elseif 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
  LinkedList<String> lista = new LinkedList<>();
  lista.addAll((LinkedList) val);
  RESULT = (LinkedList) lista;

                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_elseif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_elseif ::= ELSEIF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    LinkedList<String> lista = new LinkedList<>();

                        lista.add("else if "+ exp + ":");

                        Traduccion.Traductor.contador++;

                        lista.addAll(Traduccion.Traductor.tabulaciones(inst));
                        Traduccion.Traductor.contador--;


                        RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_elseif",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estructura_else ::= ELSE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              LinkedList RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        LinkedList<String> lista = new LinkedList<>();

                        lista.add("else "+ ":");

                        Traduccion.Traductor.contador++;

                        lista.addAll(Traduccion.Traductor.tabulaciones(inst));
                        Traduccion.Traductor.contador--;


                        RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estructura_switch ::= SWITCH PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_case DEFAULT DOSPTOS lista_instrucciones case_end LLAVE_CIERRE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int inst_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inst_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList inst_2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    LinkedList<String> lista = new LinkedList<>();

    lista.add("def"+ " switch("+exp+")"+":");
    String tabs = "";
    Traduccion.Traductor.contador++;
    for (int i = 0; i < Traduccion.Traductor.contador; i++){
        tabs += "\t";
    }
    lista.add(tabs+"switcher = {");
    Traduccion.Traductor.contador++;
    lista.addAll(Traduccion.Traductor.tabulaciones(inst));
    lista.add(tabs+"\t"+"default: ");
    Traduccion.Traductor.contador++;
    lista.addAll(Traduccion.Traductor.tabulaciones(inst_2));
    lista.add("}");
    Traduccion.Traductor.contador--;
    Traduccion.Traductor.contador--;
    Traduccion.Traductor.contador--;


    RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_switch",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_case ::= lista_case estructura_case 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lista.addAll((LinkedList) val);
  RESULT = (LinkedList) lista;
   ;

                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_case ::= estructura_case 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   LinkedList<String> lista = new LinkedList<>();
   lista.addAll((LinkedList) val);
   RESULT = (LinkedList) lista;

                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estructura_case ::= CASE expresiones DOSPTOS lista_instrucciones case_end 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    LinkedList<String> lista = new LinkedList<>();

    lista.add(exp+":");

    Traduccion.Traductor.contador++;

    lista.addAll(Traduccion.Traductor.tabulaciones(inst));
    lista.add(",");
    Traduccion.Traductor.contador--;


    RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_case",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // case_end ::= BREAK PTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_end",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // case_end ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_end",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_for ::= FOR PARENTESIS_ABERTURA tipodato VARIABLE IGUAL expresiones PTOCOMA VARIABLE simbolos_for asignacion_for PTOCOMA VARIABLE INCREMENTO PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object inicio = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int inst_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inst_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst_1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

        LinkedList<String> lista = new LinkedList<>();
        lista.add("for "+val+" in range"+"("+inicio+","+a+")"+":");

        Traduccion.Traductor.contador++;

        lista.addAll(Traduccion.Traductor.tabulaciones(inst_1));
        Traduccion.Traductor.contador--;


        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_for",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simbolos_for ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolos_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simbolos_for ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolos_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simbolos_for ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolos_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simbolos_for ::= MENOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolos_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simbolos_for ::= IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolos_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simbolos_for ::= DOBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolos_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_for ::= expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estructura_while ::= WHILE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int inst_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inst_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst_1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
         LinkedList<String> lista = new LinkedList<>();
                lista.add("while "+exp+" :");

                Traduccion.Traductor.contador++;

                lista.addAll(Traduccion.Traductor.tabulaciones(inst_1));
                Traduccion.Traductor.contador--;


                RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_while",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estructura_dowhile ::= DO LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE WHILE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE PTOCOMA 
            {
              Object RESULT =null;
		int inst_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int inst_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList inst_1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
  LinkedList<String> lista = new LinkedList<>();

                 lista.add("while "+"True"+" :");

                 Traduccion.Traductor.contador++;

                String tabs = "";
                    for (int i = 0; i < Traduccion.Traductor.contador; i++){
                        tabs += "\t";
                    }
                 lista.addAll(Traduccion.Traductor.tabulaciones(inst_1));
                 lista.add(tabs+do_while+" = "+do_while+" + 1 ");
                 lista.add(tabs+"if ("+exp.toString()+" )");
                 lista.add(tabs+"\t"+"break");
                 Traduccion.Traductor.contador--;


                 RESULT = lista;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_dowhile",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= MENOS expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "-"+a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresiones ::= expresiones SUMA expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"+"+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresiones ::= expresiones MENOS expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"-"+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresiones ::= expresiones MULT expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"*"+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresiones ::= expresiones DIVISION expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"/"+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresiones ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresiones ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresiones ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresiones ::= VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString(); do_while = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresiones ::= T_F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresiones ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresiones ::= MENOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresiones ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresiones ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresiones ::= DOBLE_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresiones ::= DISTINTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresiones ::= OR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresiones ::= AND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresiones ::= NOT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresiones ::= llamada_funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresiones ::= expresiones OR expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" or "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresiones ::= expresiones AND expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" and "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones ::= NOT expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " not "+a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresiones ::= expresiones DOBLE_IGUAL expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" == "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresiones ::= expresiones DISTINTO expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" != "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresiones ::= expresiones MENOR_QUE expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" < "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresiones ::= expresiones MAYOR_QUE expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" > "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresiones ::= expresiones MAYOR_IGUAL expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" >= "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresiones ::= expresiones MENOR_IGUAL expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" <= "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipodato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipodato ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipodato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipodato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipodato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llamada_funcion ::= VARIABLE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()
+b.toString()+exp.toString()+c.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamada_funcion ::= VARIABLE PARENTESIS_ABERTURA PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()
  +b.toString()+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // definir_globales ::= VOID DEFINIR_GLOBALES PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA instrucciones_globales LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definir_globales",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instrucciones_globales ::= instrucciones_globales definiciones_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_globales",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instrucciones_globales ::= definiciones_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_globales",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // definiciones_globales ::= tipo_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definiciones_globales",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_globales ::= DOUBLE VARIABLE IGUAL valor PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

    Graficas.Globales global = new Graficas.Globales(a,b.toString());
    Graficas.Variables.variablesGlobales.add(global);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_globales",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_globales ::= STRING VARIABLE IGUAL valor PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Graficas.Globales global = new Graficas.Globales(a,b.toString());
      Graficas.Variables.variablesGlobales.add(global);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_globales",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // definir_barras ::= VOID GRAFICABARRAS PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA instrucciones_barras LLAVE_CIERRE 
            {
              Object RESULT =null;
		
Graficas.Graficar.tipo = "Barras";
Graficas.Graficar.identificar();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definir_barras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // instrucciones_barras ::= instrucciones_barras instruccion_barras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // instrucciones_barras ::= instruccion_barras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instruccion_barras ::= titulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_barras",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instruccion_barras ::= tituloX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_barras",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // instruccion_barras ::= tituloY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_barras",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // instruccion_barras ::= asignacion_valores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_barras",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // instruccion_barras ::= ejex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_barras",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // titulo ::= STRING TITULO IGUAL valor PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
Graficas.Graficar.titulo = a.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tituloX ::= STRING TITULOEJEX IGUAL valor PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
Graficas.Graficar.TituloEjex = a.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tituloX",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tituloY ::= STRING TITULOEJEY IGUAL valor PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
Graficas.Graficar.TituloEjey = a.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tituloY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ejex ::= STRING ARREGLO EJEX IGUAL LLAVE_ABERTURA valores LLAVE_CIERRE PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
String cadena = a.toString();
String[] partes = cadena.split(",");
for (String parte : partes) {
    // Elimina las comillas dobles alrededor de cada parte (si las hubiera)
    //parte = parte.replaceAll("\"", "");
    Graficas.Graficar.ejex.add(parte);
}


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignacion_valores ::= DOUBLE ARREGLO VALORES IGUAL LLAVE_ABERTURA valores LLAVE_CIERRE PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

String cadena = a.toString();
 String[] valores = cadena.split(",");

        // Recorrer los valores y agregarlos a la LinkedList como Double
        for (String valor : valores) {
            try {
                double valorDouble = Double.parseDouble(valor);
                Graficas.Graficar.valores.add(valorDouble);
            } catch (NumberFormatException e) {
                System.err.println("Error al convertir el valor: " + valor + " a Double.");
                Graficas.Graficar.valores.add(0.00);
            }

        }


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_valores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valores ::= valor COMA valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

RESULT = a.toString()+","+b.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valores ::= valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = a.toString();

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // definir_pie ::= VOID GRAFICAPIE PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA instrucciones_pie LLAVE_CIERRE 
            {
              Object RESULT =null;
		Graficas.Graficar.tipo = "Pie";
Graficas.Graficar.identificar();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definir_pie",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // instrucciones_pie ::= instrucciones_pie instruccion_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_pie",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // instrucciones_pie ::= instruccion_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_pie",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // instruccion_pie ::= titulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_pie",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // instruccion_pie ::= ejex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_pie",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // instruccion_pie ::= asignacion_valores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_pie",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valor ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor ::= VARIABLE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
nombre = nombre.toLowerCase();
String valor_retornar = "0.00";
for (Graficas.Globales valor : Graficas.Variables.variablesGlobales) {
    if (valor.nombre.equals(nombre)) {
        //System.out.println("Se encontró el valor de la variable global");
        valor_retornar = valor.valor;
        break;
    }
}
RESULT = valor_retornar;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor ::= definicion_new 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // definicion_new ::= DOLAR LLAVE_ABERTURA NEWVALOR COMA CADENA COMA CADENA LLAVE_CIERRE 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

    valor1 = Graficas.Variables.eliminarComillas(valor1);
    String valor_retornar ="0.00";
for (Json.Variables_Json valor : Graficas.Variables.variablesJsons) {
    if (valor.documento.equals(valor1)) {

        if (valor.variable.equals(valor2)) {
            valor_retornar = valor.valor;
            break; // Salir del bucle cuando se encuentra el valor deseado
        }
    }
}
RESULT = valor_retornar;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion_new",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
