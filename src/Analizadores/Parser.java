
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\007" +
    "\007\000\002\007\005\000\002\025\007\000\002\033\006" +
    "\000\002\015\013\000\002\015\012\000\002\015\012\000" +
    "\002\015\011\000\002\030\004\000\002\030\003\000\002" +
    "\027\011\000\002\031\006\000\002\032\015\000\002\034" +
    "\004\000\002\034\003\000\002\035\007\000\002\036\004" +
    "\000\002\036\002\000\002\016\015\000\002\040\011\000" +
    "\002\041\013\000\002\017\004\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\004\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\022\006\000\002\042\011\000\002\043\004\000\002" +
    "\043\003\000\002\045\003\000\002\044\003\000\002\044" +
    "\007\000\002\046\016\000\002\046\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\006\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\010\011\001\002\000" +
    "\004\011\012\001\002\000\004\005\013\001\002\000\036" +
    "\003\035\006\042\007\034\017\016\020\045\021\017\022" +
    "\031\023\032\024\025\030\024\052\023\056\041\060\020" +
    "\061\026\001\002\000\004\030\263\001\002\000\044\006" +
    "\ufffd\007\ufffd\012\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\030\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\060\ufffd\061\ufffd\001\002\000\004\030\uffc9" +
    "\001\002\000\004\030\uffc6\001\002\000\004\010\255\001" +
    "\002\000\044\006\ufffa\007\ufffa\012\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\030\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa\061\ufffa\001\002" +
    "\000\044\006\ufff8\007\ufff8\012\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\030\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\060\ufff8\061\ufff8\001\002\000" +
    "\004\010\232\001\002\000\004\025\227\001\002\000\004" +
    "\010\201\001\002\000\004\005\171\001\002\000\044\006" +
    "\ufff9\007\ufff9\012\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\030\ufff9\052\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\060\ufff9\061\ufff9\001\002\000\044\006\ufffb" +
    "\007\ufffb\012\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\030\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\060\ufffb\061\ufffb\001\002\000\004\030\uffc5\001" +
    "\002\000\004\030\uffc8\001\002\000\036\006\042\007\034" +
    "\012\170\017\016\020\045\021\017\022\031\023\032\024" +
    "\025\030\024\052\023\056\041\060\020\061\026\001\002" +
    "\000\004\010\164\001\002\000\004\027\163\001\002\000" +
    "\044\006\ufff5\007\ufff5\012\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\030\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\060\ufff5\061\ufff5\001\002\000\044" +
    "\006\ufff7\007\ufff7\012\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\030\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\060\ufff7\061\ufff7\001\002\000\044\006" +
    "\ufff3\007\ufff3\012\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\030\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\060\ufff3\061\ufff3\001\002\000\004\010\103" +
    "\001\002\000\004\062\046\001\002\000\044\006\ufff4\007" +
    "\ufff4\012\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\030\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\060\ufff4\061\ufff4\001\002\000\044\006\ufff6\007\ufff6" +
    "\012\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\030\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\060\ufff6\061\ufff6\001\002\000\004\030\uffc7\001\002\000" +
    "\004\010\047\001\002\000\004\011\050\001\002\000\004" +
    "\005\051\001\002\000\006\020\053\023\052\001\002\000" +
    "\004\030\077\001\002\000\004\030\062\001\002\000\010" +
    "\012\uffc1\020\uffc1\023\uffc1\001\002\000\010\012\uffbf\020" +
    "\uffbf\023\uffbf\001\002\000\010\012\uffc0\020\uffc0\023\uffc0" +
    "\001\002\000\010\012\061\020\053\023\052\001\002\000" +
    "\010\012\uffc2\020\uffc2\023\uffc2\001\002\000\044\006\uffc3" +
    "\007\uffc3\012\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\030\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\060\uffc3\061\uffc3\001\002\000\004\025\063\001" +
    "\002\000\006\031\065\063\064\001\002\000\004\005\067" +
    "\001\002\000\004\027\066\001\002\000\010\012\uffbc\020" +
    "\uffbc\023\uffbc\001\002\000\004\064\070\001\002\000\004" +
    "\065\071\001\002\000\004\040\072\001\002\000\004\065" +
    "\073\001\002\000\004\040\074\001\002\000\004\012\075" +
    "\001\002\000\004\027\076\001\002\000\010\012\uffbd\020" +
    "\uffbd\023\uffbd\001\002\000\004\025\100\001\002\000\004" +
    "\040\101\001\002\000\004\027\102\001\002\000\010\012" +
    "\uffbe\020\uffbe\023\uffbe\001\002\000\014\017\016\020\045" +
    "\021\017\022\031\023\032\001\002\000\020\026\111\030" +
    "\112\031\106\033\107\037\110\040\105\044\115\001\002" +
    "\000\040\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\027" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\042\uffd6\043\uffd6" +
    "\045\uffd6\046\uffd6\051\uffd6\001\002\000\040\011\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\027\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\042\uffd7\043\uffd7\045\uffd7\046\uffd7\051" +
    "\uffd7\001\002\000\020\026\111\030\112\031\106\033\107" +
    "\037\110\040\105\044\115\001\002\000\040\011\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\027\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\051" +
    "\uffd4\001\002\000\040\011\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\042" +
    "\uffd8\043\uffd8\045\uffd8\046\uffd8\051\uffd8\001\002\000\042" +
    "\010\157\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\027" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\042\uffd5\043\uffd5" +
    "\045\uffd5\046\uffd5\051\uffd5\001\002\000\040\011\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\027\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\051" +
    "\uffd3\001\002\000\034\013\123\014\131\015\127\016\130" +
    "\027\147\032\122\033\120\034\124\035\126\042\117\043" +
    "\132\045\121\046\125\001\002\000\020\026\111\030\112" +
    "\031\106\033\107\037\110\040\105\044\115\001\002\000" +
    "\040\011\uffd0\013\123\014\131\015\127\016\130\027\uffd0" +
    "\032\122\033\120\034\124\035\126\042\uffd0\043\uffd0\045" +
    "\121\046\125\051\uffd0\001\002\000\020\026\111\030\112" +
    "\031\106\033\107\037\110\040\105\044\115\001\002\000" +
    "\020\026\111\030\112\031\106\033\107\037\110\040\105" +
    "\044\115\001\002\000\020\026\111\030\112\031\106\033" +
    "\107\037\110\040\105\044\115\001\002\000\020\026\111" +
    "\030\112\031\106\033\107\037\110\040\105\044\115\001" +
    "\002\000\020\026\111\030\112\031\106\033\107\037\110" +
    "\040\105\044\115\001\002\000\020\026\111\030\112\031" +
    "\106\033\107\037\110\040\105\044\115\001\002\000\020" +
    "\026\111\030\112\031\106\033\107\037\110\040\105\044" +
    "\115\001\002\000\020\026\111\030\112\031\106\033\107" +
    "\037\110\040\105\044\115\001\002\000\020\026\111\030" +
    "\112\031\106\033\107\037\110\040\105\044\115\001\002" +
    "\000\020\026\111\030\112\031\106\033\107\037\110\040" +
    "\105\044\115\001\002\000\020\026\111\030\112\031\106" +
    "\033\107\037\110\040\105\044\115\001\002\000\020\026" +
    "\111\030\112\031\106\033\107\037\110\040\105\044\115" +
    "\001\002\000\040\011\uffd2\013\123\014\131\015\127\016" +
    "\130\027\uffd2\032\122\033\120\034\124\035\126\042\117" +
    "\043\uffd2\045\121\046\125\051\uffd2\001\002\000\040\011" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\027\uffca\032\122" +
    "\033\120\034\124\035\126\042\uffca\043\uffca\045\uffca\046" +
    "\uffca\051\uffca\001\002\000\040\011\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\027\uffce\032\122\033\120\034\124\035" +
    "\126\042\uffce\043\uffce\045\uffce\046\uffce\051\uffce\001\002" +
    "\000\040\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\027" +
    "\uffcf\032\122\033\120\034\124\035\126\042\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\051\uffcf\001\002\000\040\011\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\027\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9\051" +
    "\uffd9\001\002\000\040\011\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\027\uffcd\032\122\033\120\034\124\035\126\042" +
    "\uffcd\043\uffcd\045\uffcd\046\uffcd\051\uffcd\001\002\000\040" +
    "\011\uffda\013\uffda\014\uffda\015\uffda\016\uffda\027\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\042\uffda\043\uffda\045\uffda" +
    "\046\uffda\051\uffda\001\002\000\040\011\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\027\uffcb\032\122\033\120\034\124" +
    "\035\126\042\uffcb\043\uffcb\045\uffcb\046\uffcb\051\uffcb\001" +
    "\002\000\040\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\027\uffdc\032\uffdc\033\uffdc\034\124\035\126\042\uffdc\043" +
    "\uffdc\045\uffdc\046\uffdc\051\uffdc\001\002\000\040\011\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\027\uffcc\032\122\033" +
    "\120\034\124\035\126\042\uffcc\043\uffcc\045\uffcc\046\uffcc" +
    "\051\uffcc\001\002\000\040\011\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\027\uffdb\032\uffdb\033\uffdb\034\124\035\126" +
    "\042\uffdb\043\uffdb\045\uffdb\046\uffdb\051\uffdb\001\002\000" +
    "\040\011\uffd1\013\123\014\131\015\127\016\130\027\uffd1" +
    "\032\122\033\120\034\124\035\126\042\uffd1\043\uffd1\045" +
    "\121\046\125\051\uffd1\001\002\000\004\030\150\001\002" +
    "\000\004\057\151\001\002\000\004\011\152\001\002\000" +
    "\004\005\153\001\002\000\036\003\035\006\042\007\034" +
    "\017\016\020\045\021\017\022\031\023\032\024\025\030" +
    "\024\052\023\056\041\060\020\061\026\001\002\000\036" +
    "\006\042\007\034\012\155\017\016\020\045\021\017\022" +
    "\031\023\032\024\025\030\024\052\023\056\041\060\020" +
    "\061\026\001\002\000\044\006\uffe0\007\uffe0\012\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\030\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\060\uffe0\061" +
    "\uffe0\001\002\000\044\006\ufffe\007\ufffe\012\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\030\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe\061\ufffe" +
    "\001\002\000\020\026\111\030\112\031\106\033\107\037" +
    "\110\040\105\044\115\001\002\000\034\011\161\013\123" +
    "\014\131\015\127\016\130\032\122\033\120\034\124\035" +
    "\126\042\117\043\132\045\121\046\125\001\002\000\040" +
    "\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\027\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\042\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\051\uffc4\001\002\000\040\011\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\027\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\051\uffdd\001" +
    "\002\000\044\006\ufffc\007\ufffc\012\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\030\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc\061\ufffc\001\002" +
    "\000\020\026\111\030\112\031\106\033\107\037\110\040" +
    "\105\044\115\001\002\000\034\011\166\013\123\014\131" +
    "\015\127\016\130\032\122\033\120\034\124\035\126\042" +
    "\117\043\132\045\121\046\125\001\002\000\004\027\167" +
    "\001\002\000\044\006\ufff0\007\ufff0\012\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\030\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\060\ufff0\061\ufff0\001" +
    "\002\000\004\002\uffff\001\002\000\036\003\035\006\042" +
    "\007\034\017\016\020\045\021\017\022\031\023\032\024" +
    "\025\030\024\052\023\056\041\060\020\061\026\001\002" +
    "\000\036\006\042\007\034\012\173\017\016\020\045\021" +
    "\017\022\031\023\032\024\025\030\024\052\023\056\041" +
    "\060\020\061\026\001\002\000\004\060\174\001\002\000" +
    "\004\010\175\001\002\000\020\026\111\030\112\031\106" +
    "\033\107\037\110\040\105\044\115\001\002\000\034\011" +
    "\177\013\123\014\131\015\127\016\130\032\122\033\120" +
    "\034\124\035\126\042\117\043\132\045\121\046\125\001" +
    "\002\000\004\027\200\001\002\000\044\006\uffde\007\uffde" +
    "\012\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\030\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\060\uffde\061\uffde\001\002\000\020\026\111\030\112\031" +
    "\106\033\107\037\110\040\105\044\115\001\002\000\034" +
    "\011\203\013\123\014\131\015\127\016\130\032\122\033" +
    "\120\034\124\035\126\042\117\043\132\045\121\046\125" +
    "\001\002\000\004\005\204\001\002\000\036\003\035\006" +
    "\042\007\034\017\016\020\045\021\017\022\031\023\032" +
    "\024\025\030\024\052\023\056\041\060\020\061\026\001" +
    "\002\000\036\006\042\007\034\012\206\017\016\020\045" +
    "\021\017\022\031\023\032\024\025\030\024\052\023\056" +
    "\041\060\020\061\026\001\002\000\050\006\uffeb\007\uffeb" +
    "\012\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\030\uffeb\047\210\050\211\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\060\uffeb\061\uffeb\001\002\000\050\006" +
    "\uffec\007\uffec\012\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\030\uffec\047\210\050\211\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\060\uffec\061\uffec\001\002" +
    "\000\004\010\217\001\002\000\004\005\214\001\002\000" +
    "\044\006\uffed\007\uffed\012\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\030\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\060\uffed\061\uffed\001\002\000\050" +
    "\006\uffe9\007\uffe9\012\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\030\uffe9\047\uffe9\050\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\060\uffe9\061\uffe9\001" +
    "\002\000\036\003\035\006\042\007\034\017\016\020\045" +
    "\021\017\022\031\023\032\024\025\030\024\052\023\056" +
    "\041\060\020\061\026\001\002\000\036\006\042\007\034" +
    "\012\216\017\016\020\045\021\017\022\031\023\032\024" +
    "\025\030\024\052\023\056\041\060\020\061\026\001\002" +
    "\000\044\006\uffe7\007\uffe7\012\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\030\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\060\uffe7\061\uffe7\001\002\000" +
    "\020\026\111\030\112\031\106\033\107\037\110\040\105" +
    "\044\115\001\002\000\034\011\221\013\123\014\131\015" +
    "\127\016\130\032\122\033\120\034\124\035\126\042\117" +
    "\043\132\045\121\046\125\001\002\000\004\005\222\001" +
    "\002\000\036\003\035\006\042\007\034\017\016\020\045" +
    "\021\017\022\031\023\032\024\025\030\024\052\023\056" +
    "\041\060\020\061\026\001\002\000\036\006\042\007\034" +
    "\012\224\017\016\020\045\021\017\022\031\023\032\024" +
    "\025\030\024\052\023\056\041\060\020\061\026\001\002" +
    "\000\050\006\uffe8\007\uffe8\012\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\030\uffe8\047\uffe8\050\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\060\uffe8\061" +
    "\uffe8\001\002\000\044\006\uffee\007\uffee\012\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\030\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\060\uffee\061\uffee" +
    "\001\002\000\050\006\uffea\007\uffea\012\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\030\uffea\047\uffea" +
    "\050\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\060" +
    "\uffea\061\uffea\001\002\000\020\026\111\030\112\031\106" +
    "\033\107\037\110\040\105\044\115\001\002\000\034\013" +
    "\123\014\131\015\127\016\130\027\231\032\122\033\120" +
    "\034\124\035\126\042\117\043\132\045\121\046\125\001" +
    "\002\000\044\006\uffef\007\uffef\012\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\030\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\056\uffef\060\uffef\061\uffef\001\002" +
    "\000\020\026\111\030\112\031\106\033\107\037\110\040" +
    "\105\044\115\001\002\000\034\011\234\013\123\014\131" +
    "\015\127\016\130\032\122\033\120\034\124\035\126\042" +
    "\117\043\132\045\121\046\125\001\002\000\004\005\235" +
    "\001\002\000\004\054\237\001\002\000\006\053\uffe4\054" +
    "\uffe4\001\002\000\020\026\111\030\112\031\106\033\107" +
    "\037\110\040\105\044\115\001\002\000\006\053\242\054" +
    "\237\001\002\000\006\053\uffe5\054\uffe5\001\002\000\004" +
    "\051\243\001\002\000\036\003\035\006\042\007\034\017" +
    "\016\020\045\021\017\022\031\023\032\024\025\030\024" +
    "\052\023\056\041\060\020\061\026\001\002\000\040\006" +
    "\042\007\034\012\uffe1\017\016\020\045\021\017\022\031" +
    "\023\032\024\025\030\024\052\023\055\245\056\041\060" +
    "\020\061\026\001\002\000\004\027\250\001\002\000\004" +
    "\012\247\001\002\000\044\006\uffe6\007\uffe6\012\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\061" +
    "\uffe6\001\002\000\010\012\uffe2\053\uffe2\054\uffe2\001\002" +
    "\000\034\013\123\014\131\015\127\016\130\032\122\033" +
    "\120\034\124\035\126\042\117\043\132\045\121\046\125" +
    "\051\252\001\002\000\036\003\035\006\042\007\034\017" +
    "\016\020\045\021\017\022\031\023\032\024\025\030\024" +
    "\052\023\056\041\060\020\061\026\001\002\000\042\006" +
    "\042\007\034\017\016\020\045\021\017\022\031\023\032" +
    "\024\025\030\024\052\023\053\uffe1\054\uffe1\055\245\056" +
    "\041\060\020\061\026\001\002\000\006\053\uffe3\054\uffe3" +
    "\001\002\000\020\026\111\030\112\031\106\033\107\037" +
    "\110\040\105\044\115\001\002\000\034\011\257\013\123" +
    "\014\131\015\127\016\130\032\122\033\120\034\124\035" +
    "\126\042\117\043\132\045\121\046\125\001\002\000\004" +
    "\005\260\001\002\000\036\003\035\006\042\007\034\017" +
    "\016\020\045\021\017\022\031\023\032\024\025\030\024" +
    "\052\023\056\041\060\020\061\026\001\002\000\036\006" +
    "\042\007\034\012\262\017\016\020\045\021\017\022\031" +
    "\023\032\024\025\030\024\052\023\056\041\060\020\061" +
    "\026\001\002\000\044\006\uffdf\007\uffdf\012\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\030\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf" +
    "\001\002\000\006\025\265\027\264\001\002\000\060\006" +
    "\ufff1\007\ufff1\012\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\030\ufff1\031\ufff1\033\ufff1\037" +
    "\ufff1\040\ufff1\044\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\060\ufff1\061\ufff1\001\002\000\020\026\111\030" +
    "\112\031\106\033\107\037\110\040\105\044\115\001\002" +
    "\000\034\013\123\014\131\015\127\016\130\027\267\032" +
    "\122\033\120\034\124\035\126\042\117\043\132\045\121" +
    "\046\125\001\002\000\060\006\ufff2\007\ufff2\012\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\037\ufff2\040\ufff2\044\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\060\ufff2\061\ufff2" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\014\005\032\007\027\015\026\016\043\025\020" +
    "\026\013\032\021\033\036\040\035\041\042\042\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\155" +
    "\007\027\015\026\016\043\025\020\026\013\032\021\033" +
    "\036\040\035\041\042\042\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\043\056" +
    "\044\055\045\053\046\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\055\045\057\046\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\103\026\013\001\001\000\006\017\113\022\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\161\022" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\115\022\112\001\001\000\002\001\001\000\006\017\145" +
    "\022\112\001\001\000\006\017\144\022\112\001\001\000" +
    "\006\017\143\022\112\001\001\000\006\017\142\022\112" +
    "\001\001\000\006\017\141\022\112\001\001\000\006\017" +
    "\140\022\112\001\001\000\006\017\137\022\112\001\001" +
    "\000\006\017\136\022\112\001\001\000\006\017\135\022" +
    "\112\001\001\000\006\017\134\022\112\001\001\000\006" +
    "\017\133\022\112\001\001\000\006\017\132\022\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\014\005\153\007\027\015\026\016\043\025" +
    "\020\026\013\032\021\033\036\040\035\041\042\042\037" +
    "\001\001\000\030\004\155\007\027\015\026\016\043\025" +
    "\020\026\013\032\021\033\036\040\035\041\042\042\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\157\022\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\164\022" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\014\005\171\007" +
    "\027\015\026\016\043\025\020\026\013\032\021\033\036" +
    "\040\035\041\042\042\037\001\001\000\030\004\155\007" +
    "\027\015\026\016\043\025\020\026\013\032\021\033\036" +
    "\040\035\041\042\042\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\175\022\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\201\022\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\014\005\204\007\027\015\026\016\043\025" +
    "\020\026\013\032\021\033\036\040\035\041\042\042\037" +
    "\001\001\000\030\004\155\007\027\015\026\016\043\025" +
    "\020\026\013\032\021\033\036\040\035\041\042\042\037" +
    "\001\001\000\010\027\212\030\206\031\211\001\001\000" +
    "\006\027\225\031\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\014\005\214\007\027\015\026\016\043\025\020\026\013" +
    "\032\021\033\036\040\035\041\042\042\037\001\001\000" +
    "\030\004\155\007\027\015\026\016\043\025\020\026\013" +
    "\032\021\033\036\040\035\041\042\042\037\001\001\000" +
    "\002\001\001\000\006\017\217\022\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\014\005\222\007" +
    "\027\015\026\016\043\025\020\026\013\032\021\033\036" +
    "\040\035\041\042\042\037\001\001\000\030\004\155\007" +
    "\027\015\026\016\043\025\020\026\013\032\021\033\036" +
    "\040\035\041\042\042\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\227\022\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\232\022\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\237\035\235\001\001\000\002\001\001\000" +
    "\006\017\250\022\112\001\001\000\004\035\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\014\005" +
    "\243\007\027\015\026\016\043\025\020\026\013\032\021" +
    "\033\036\040\035\041\042\042\037\001\001\000\032\004" +
    "\155\007\027\015\026\016\043\025\020\026\013\032\021" +
    "\033\036\036\245\040\035\041\042\042\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\014\005\252\007" +
    "\027\015\026\016\043\025\020\026\013\032\021\033\036" +
    "\040\035\041\042\042\037\001\001\000\032\004\155\007" +
    "\027\015\026\016\043\025\020\026\013\032\021\033\036" +
    "\036\253\040\035\041\042\042\037\001\001\000\002\001" +
    "\001\000\006\017\255\022\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\014\005\260\007\027\015" +
    "\026\016\043\025\020\026\013\032\021\033\036\040\035" +
    "\041\042\042\037\001\001\000\030\004\155\007\027\015" +
    "\026\016\043\025\020\026\013\032\021\033\036\040\035" +
    "\041\042\042\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\265\022\112\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.left + " - Columna: " + s.right + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.left + " - Columna: " + s.right + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= VOID MAIN PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_instrucciones ::= error PTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= estructura_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= estructura_switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= declaracion_sin_asignar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= estructura_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= estructura_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= estructura_dowhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= definir_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= tipodato VARIABLE IGUAL expresiones PTOCOMA 
            {
              Object RESULT =null;
		System.out.println("Se delcaro todo bien");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= tipodato VARIABLE PTOCOMA 
            {
              Object RESULT =null;
		System.out.println("Calma, todo sigue bien");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // imprimir ::= PRINT PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE PTOCOMA 
            {
              Object RESULT =null;
		System.out.println("Se imprimio algo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_sin_asignar ::= VARIABLE IGUAL expresiones PTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_sin_asignar",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE lista_elseif estructura_else 
            {
              Object RESULT =null;
		System.out.println("JUsto aqui");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE estructura_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE lista_elseif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructura_if ::= IF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_elseif ::= lista_elseif estructura_elseif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_elseif",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_elseif ::= estructura_elseif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_elseif",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura_elseif ::= ELSEIF PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_elseif",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura_else ::= ELSE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_switch ::= SWITCH PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_case DEFAULT DOSPTOS lista_instrucciones case_end LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_case ::= lista_case estructura_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_case ::= estructura_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estructura_case ::= CASE expresiones DOSPTOS lista_instrucciones case_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_case",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // case_end ::= BREAK PTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_end",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // case_end ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_end",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estructura_for ::= FOR PARENTESIS_ABERTURA declaracion expresiones PTOCOMA VARIABLE INCREMENTO PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_for",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estructura_while ::= WHILE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_while",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_dowhile ::= DO LLAVE_ABERTURA lista_instrucciones LLAVE_CIERRE WHILE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE PTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructura_dowhile",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresiones ::= MENOS expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresiones ::= expresiones SUMA expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresiones ::= expresiones MENOS expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresiones ::= expresiones MULT expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresiones ::= expresiones DIVISION expresiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresiones ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresiones ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresiones ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresiones ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= T_F 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresiones ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresiones ::= expresiones OR expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresiones ::= expresiones AND expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresiones ::= NOT expresiones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresiones ::= expresiones DOBLE_IGUAL expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresiones ::= expresiones DISTINTO expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresiones ::= expresiones MENOR_QUE expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresiones ::= expresiones MAYOR_QUE expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresiones ::= expresiones MAYOR_IGUAL expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresiones ::= expresiones MENOR_IGUAL expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipodato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipodato ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipodato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipodato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipodato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamada_funcion ::= VARIABLE PARENTESIS_ABERTURA expresiones PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // definir_globales ::= VOID DEFINIR_GLOBALES PARENTESIS_ABERTURA PARENTESIS_CIERRE LLAVE_ABERTURA instrucciones_globales LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definir_globales",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instrucciones_globales ::= instrucciones_globales definiciones_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_globales",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instrucciones_globales ::= definiciones_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_globales",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // definiciones_globales ::= tipo_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definiciones_globales",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_globales ::= definicion_double 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_globales",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_globales ::= STRING VARIABLE IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_globales",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // definicion_double ::= DOUBLE VARIABLE IGUAL DOLAR LLAVE_ABERTURA NEWVALOR COMA CADENA COMA CADENA LLAVE_CIERRE PTOCOMA 
            {
              Object RESULT =null;
		System.out.println("Definio otro tipo de hlobal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion_double",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // definicion_double ::= DOUBLE VARIABLE IGUAL DECIMAL PTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion_double",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
